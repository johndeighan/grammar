{
  "version": 3,
  "file": "grammar-utils.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\grammar-utils.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# grammar-utils.test.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined,\r\n\t} from '@jdeighan/llutils'\r\nimport {\r\n\tterminal, nonterminal, RuleEx,\r\n\t} from '@jdeighan/grammar/rule-ex'\r\nimport * as lib2 from '@jdeighan/llutils/utest'\r\nObject.assign(global, lib2)\r\nimport * as lib from '@jdeighan/grammar'\r\nObject.assign(global, lib)\r\nimport {hSimpleAST} from '@jdeighan/grammar/grammars'\r\n\r\n# ---------------------------------------------------------------------------\r\n#symbol RuleEx\r\n\r\n# --- T -> T * P\r\nrule = {\r\n\ttype: \"rule\"\r\n\thead: \"T\"\r\n\tlParts: [\r\n\t\tnonterminal \"T\"\r\n\t\tterminal    \"*\"\r\n\t\tnonterminal \"P\"\r\n\t\t]\r\n\t}\r\n\r\nrx = new RuleEx(rule, 0)\r\nequal rx.pos, 0\r\n\r\nrx2 = rx3 = rx4 = rx5 = undef\r\n\r\nsucceeds () => rx2 = rx.getInc()\r\nequal rx2.pos, 1\r\n\r\nsucceeds () => rx3 = rx2.getInc()\r\nsucceeds () => rx4 = rx3.getInc()\r\nequal rx4.pos, 3\r\nfails () => rx5 = rx4.getInc()\r\n\r\n# ---------------------------------------------------------------------------\r\n#symbol Grammar\r\n\r\ngrammar = undef\r\nsucceeds () =>\r\n\tgrammar = new Grammar(hSimpleAST)\r\ntruthy grammar instanceof Grammar\r\nequal grammar.getRule(2), rule\r\nequal grammar.root(), \"E\"\r\nequal grammar.asString(), \"\"\"\r\n\tE -> E + T\r\n\tE -> T\r\n\tT -> T * P\r\n\tT -> P\r\n\tP -> a\r\n\t\"\"\"\r\nnRules = 0\r\nfor rule from grammar.alternatives(\"T\")\r\n\tnRules = nRules + 1\r\n\tequal rule.head, \"T\"\r\nequal nRules, 2\r\n\r\n# ---------------------------------------------------------------------------\r\n#symbol EarleyParser\r\n\r\nparser = new EarleyParser(hSimpleAST)\r\n\r\nsucceeds () => parser.parse(\"a\")\r\nsucceeds () => parser.parse(\"a+a\")\r\nsucceeds () => parser.parse(\"a*a\")\r\nsucceeds () => parser.parse(\"a+a\")\r\nsucceeds () => parser.parse(\"a+a*a\")\r\nsucceeds () => parser.parse(\"a*a+a\")\r\n\r\nfails () => parser.parse(\"b\")\r\nfails () => parser.parse(\"a+b\")\r\nfails () => parser.parse(\"b*a\")\r\nfails () => parser.parse(\"a++a\")\r\nfails () => parser.parse(\"a+a**a\")\r\nfails () => parser.parse(\"a*a+\")\r\n\r\n# ---------------------------------------------------------------------------\r\n# create Grammar object from a string\r\n\r\n(() =>\r\n\tgrammar = new Grammar(astFromString(\"\"\"\r\n\t\tE -> E + T\r\n\t\tE -> T\r\n\t\tT -> T * P\r\n\t\tT -> P\r\n\t\tP -> a\r\n\t\t\"\"\"))\r\n\tequal grammar.asString(), \"\"\"\r\n\t\tE -> E + T\r\n\t\tE -> T\r\n\t\tT -> T * P\r\n\t\tT -> P\r\n\t\tP -> a\r\n\t\t\"\"\"\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# create an EarleyParser object from a string\r\n\r\n(() =>\r\n\tparser = new EarleyParser(\"\"\"\r\n\t\tE -> E + T\r\n\t\tE -> T\r\n\t\tT -> T * P\r\n\t\tT -> P\r\n\t\tP -> a\r\n\t\t\"\"\")\r\n\r\n\tsucceeds () => parser.parse(\"a\")\r\n\tsucceeds () => parser.parse(\"a+a\")\r\n\tsucceeds () => parser.parse(\"a*a\")\r\n\tsucceeds () => parser.parse(\"a+a\")\r\n\tsucceeds () => parser.parse(\"a+a*a\")\r\n\tsucceeds () => parser.parse(\"a*a+a\")\r\n\r\n\tfails () => parser.parse(\"b\")\r\n\tfails () => parser.parse(\"a+b\")\r\n\tfails () => parser.parse(\"b*a\")\r\n\tfails () => parser.parse(\"a++a\")\r\n\tfails () => parser.parse(\"a+a**a\")\r\n\tfails () => parser.parse(\"a*a+\")\r\n\t)()\r\n"
  ]
}