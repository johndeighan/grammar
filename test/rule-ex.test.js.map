{
  "version": 3,
  "file": "rule-ex.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\rule-ex.test.coffee"
  ],
  "names": [],
  "mappings": "AAAqB;AAErB,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;CAAA,MAAA;;AAGA,OAAO,CAAA,QAAP,MAAA;;AACA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,IAAtB;;AACA,OAAO,CAAA,OAAP,MAAA;;AACA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,GAAtB,EARqB;;;AAYrB,KAAA,CAAM,cAAA,CAAe,QAAf,CAAN,EAAgC;EAC/B,IAAA,EAAM,MADyB;EAE/B,IAAA,EAAM,GAFyB;EAG/B,MAAA,EAAQ;IACP;MAAC,IAAA,EAAM,aAAP;MAAsB,KAAA,EAAO;IAA7B,CADO;;AAHuB,CAAhC;;AAQA,KAAA,CAAM,cAAA,CAAe,QAAf,CAAN,EAAgC;EAC/B,IAAA,EAAM,MADyB;EAE/B,IAAA,EAAM,GAFyB;EAG/B,MAAA,EAAQ,CACP,WAAA,CAAY,GAAZ,CADO;AAHuB,CAAhC;;AAQA,KAAA,CAAM,cAAA,CAAe,QAAf,CAAN,EAAgC;EAC/B,IAAA,EAAM,MADyB;EAE/B,IAAA,EAAM,GAFyB;EAG/B,MAAA,EAAQ;IACP;MAAC,IAAA,EAAM,UAAP;MAAmB,KAAA,EAAO;IAA1B,CADO;;AAHuB,CAAhC;;AAQA,KAAA,CAAM,cAAA,CAAe,QAAf,CAAN,EAAgC;EAC/B,IAAA,EAAM,MADyB;EAE/B,IAAA,EAAM,GAFyB;EAG/B,MAAA,EAAQ,CACP,QAAA,CAAS,GAAT,CADO;AAHuB,CAAhC;;AAQA,KAAA,CAAM,cAAA,CAAe,qBAAf,CAAN,EAA6C;EAC5C,IAAA,EAAM,MADsC;EAE5C,IAAA,EAAM,MAFsC;EAG5C,MAAA,EAAQ,CACP,WAAA,CAAY,MAAZ,CADO,EAEP,QAAA,CAAS,GAAT,CAFO,EAGP,WAAA,CAAY,MAAZ,CAHO;AAHoC,CAA7C;;AAWA,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,KAAA,EAAA;EAAC,KAAA,GAAQ;IACP,IAAA,EAAM,MADC;IAEP,IAAA,EAAM,GAFC;IAGP,MAAA,EAAQ,CACP,QAAA,CAAS,GAAT,CADO,EAEP,WAAA,CAAY,MAAZ,CAFO,EAGP,QAAA,CAAS,GAAT,CAHO,EAIP,WAAA,CAAY,MAAZ,CAJO;EAHD;EAUR,iBAAA,GAAoB,CAAC,CAAD,CAAA,GAAA;AAAO,WAAO,CAAA,EAAA,CAAA,CAAK,CAAL,CAAA,EAAA;EAAd;EACpB,KAAA,CAAM,YAAA,CAAa,KAAb,EAAoB,CAAC,iBAAD,CAApB,CAAN,EAAgD,wBAAhD;SACA,KAAA,CAAM,YAAA,CAAa,KAAb,EAAoB;IAAC,iBAAD;IAAoB,GAAA,EAAK;EAAzB,CAApB,CAAN,EAAwD,0BAAxD;AAbA,CAAD,CAAA,CAAA",
  "sourcesContent": [
    "# rule-ex.test.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined,\r\n\t} from '@jdeighan/llutils'\r\nimport * as lib2 from '@jdeighan/llutils/utest'\r\nObject.assign(global, lib2)\r\nimport * as lib from '@jdeighan/grammar/rule-ex'\r\nObject.assign(global, lib)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nequal ruleFromString('E -> T'), {\r\n\ttype: 'rule'\r\n\thead: 'E'\r\n\tlParts: [\r\n\t\t{type: 'nonterminal', value: 'T'}\r\n\t\t]\r\n\t}\r\n\r\nequal ruleFromString('E -> T'), {\r\n\ttype: 'rule'\r\n\thead: 'E'\r\n\tlParts: [\r\n\t\tnonterminal('T')\r\n\t\t]\r\n\t}\r\n\r\nequal ruleFromString('E -> a'), {\r\n\ttype: 'rule'\r\n\thead: 'E'\r\n\tlParts: [\r\n\t\t{type: 'terminal', value: 'a'}\r\n\t\t]\r\n\t}\r\n\r\nequal ruleFromString('E -> a'), {\r\n\ttype: 'rule'\r\n\thead: 'E'\r\n\tlParts: [\r\n\t\tterminal('a')\r\n\t\t]\r\n\t}\r\n\r\nequal ruleFromString('Expr -> Expr + Term'), {\r\n\ttype: 'rule'\r\n\thead: 'Expr'\r\n\tlParts: [\r\n\t\tnonterminal 'Expr'\r\n\t\tterminal '+'\r\n\t\tnonterminal 'Term'\r\n\t\t]\r\n\t}\r\n\r\n\r\n(() =>\r\n\thRule = {\r\n\t\ttype: \"rule\"\r\n\t\thead: \"E\"\r\n\t\tlParts: [\r\n\t\t\tterminal \"P\"\r\n\t\t\tnonterminal \"name\"\r\n\t\t\tterminal \"a\"\r\n\t\t\tnonterminal \"expr\"\r\n\t\t\t]\r\n\t\t}\r\n\ttransformTerminal = (x) => return \"\\\"#{x}\\\"\"\r\n\tequal ruleAsString(hRule, {transformTerminal}), 'E -> \"P\" name \"a\" expr'\r\n\tequal ruleAsString(hRule, {transformTerminal, pos: 3}), 'E -> \"P\" name \"a\" â€¢ expr'\r\n\t)()\r\n"
  ]
}